---
- name: Include vars
  include_tasks: 0_set_fact_by_odoo_instance.yml

- block:
    - name: Create user
      ansible.builtin.user:
        name: "{{linux_user}}"
        create_home: true
        home: "{{env_path}}"
        shell: /bin/bash
      become: yes

    - name: Add the the current user to the odoo group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: "{{linux_user}}"
        append: true
      become: yes
  when: not odoo.development

- name: Create odoo directory
  ansible.builtin.file:
    path: "{{item}}"
    state: directory
    mode: u=rwx,g=rwx
  loop:
    - "{{env_path}}"
    - "{{env_path}}/etc"
    - "{{env_path}}/data/filestore"
    - "{{env_path}}/addons"
  become: yes
  become_user: "{{ linux_user }}"

- name: Apt installation
  ansible.builtin.apt:
    update_cache: true
    name:
      - git
      - virtualenv
      - libsasl2-dev
      - libldap2-dev
      - libssl-dev
      - acl
      - postgresql-client
      - libpq-dev
      - libxml2-dev
      - libxslt-dev
    state: present
  become: true

- name: Add public key gihub.com to known_hosts
  ansible.builtin.known_hosts:
    name: github.com
    state: present
    key: "{{ public_key_github }}"

- name: Avoid detected dubious ownership
  community.general.git_config:
    name: safe.directory
    scope: global
    value: "{{env_path}}/odoo"

- name: Clone odoo community repository
  ansible.builtin.git:
    repo: https://github.com/odoo/odoo.git
    dest: "{{env_path}}/odoo"
    version: "{{odoo.version}}.0"
    single_branch: "true"
    depth: 1
  become: True
  become_user: "{{ linux_user }}"

- name: Clone odoo template repository
  ansible.builtin.git:
    repo: https://github.com/odoo/design-themes.git
    dest: "{{env_path}}/addons/design-themes"
    clone: true
    update: true
    version: "{{odoo.version}}.0"
    single_branch: "true"
    depth: 1
  become: True
  become_user: "{{ linux_user }}"

- name: Create a list of dependencies
  ansible.builtin.shell:
    cmd: /usr/bin/sed -n -e '/^Depends:/,/^Pre/ s/ python3-\(.*\),/python3-\1/p' {{env_path}}/odoo/debian/control
  register: list_dependance
  become: True

- name: Get package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Install apt dependencies
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: true
    state: present
  with_items: "{{ list_dependance['stdout_lines'] }}"
  when: item not in ansible_facts.packages
  ignore_errors: true
  become: yes

#- name: Add key of github.com to known_hosts
#  ansible.builtin.known_hosts:
#    name: github.com
#    key: "{{ lookup('pipe', 'ssh-keyscan github.com') }}"
#    state: present
#  ignore_errors: true
#  become: true
#  become_user: "{{ linux_user }}"

- name: Clone odoo enterprise repository
  ansible.builtin.git:
    repo: git@github.com:odoo/enterprise.git
    dest: "{{env_path}}/addons/enterprise"
    clone: true
    update: true
    version: "{{odoo.version}}.0"
    single_branch: "true"
    depth: 1
  when: odoo.enterprise or odoo.development and update_repo
  ignore_errors: true

- name: Change group and access right for repo enterprise
  ansible.builtin.file:
    path: "{{env_path}}/addons/enterprise"
    group: "{{ linux_user }}"
    recurse: yes
    mode: "g=rwx"
  when: odoo.enterprise and not odoo.development
  become: yes

- name: Install pip pre-dependencies
  ansible.builtin.pip:
    name:
      - setuptools
      - wheel
    state: latest
    virtualenv: "{{env_path}}/venv"
    virtualenv_python: python{{odoo_python_mapping[odoo.version]}}
  become: True
  become_user: "{{ linux_user }}"

- name: Install instance pip pre-dependencies
  ansible.builtin.pip:
    name:
      - "{{ item }}"
    virtualenv: "{{env_path}}/venv"
    virtualenv_python: python{{odoo_python_mapping[odoo.version]}}
  loop: "{{ odoo.pip_pre_dependencies if odoo.pip_pre_dependencies is iterable else [] }}"
  become: True
  become_user: "{{ linux_user }}"

- name: Install odoo python dependencies
  ansible.builtin.pip:
    requirements: "{{env_path}}/odoo/requirements.txt"
    virtualenv: "{{env_path}}/venv"
    virtualenv_python: python3
  become: True
  become_user: "{{ linux_user }}"
  ignore_errors: true

- name: Check if wkhtmltopdf is installed
  ansible.builtin.command: wkhtmltopdf --version
  register: wkhtmltopdf_version_output
  ignore_errors: true

- name: include wkhtmltopdf installation
  include_tasks: 02_1_install_wkhtmltopdf.yml
  when: wkhtmltopdf_version_output.rc != 0
